import { Injectable, OnModuleInit } from '@nestjs/common';
import { TelegramService } from './telegram.service';

enum EMainMenu {
    STATUS = 'üìÑ –°—Ç–∞—Ç—É—Å',
    TASK = '‚ûï –ó–∞–¥–∞—á–∞',
}

enum EConfirm {
    OK = '–î–∞',
    CANCEL = '–ù–µ—Ç',
}

// TODO Move
enum EStock {
    BitMex = 'BitMex',
    ByBit = 'ByBit',
    Binance = 'Binance',
    Deribit = 'Deribit',
    Okex = 'Okex',
    Huobi = 'Huobi',
}

// TODO Move
enum TSide {
    LONG = 'LONG',
    SHORT = 'SHORT',
}

// TODO Move
class TaskConfig {
    stock?: EStock;
    marginAmount?: number;
    lineStart?: number;
    lineAfter10?: number;
    step?: number;
    lineAfter20?: number;
    side?: TSide;
    spike?: number;
    cancelAfter?: number;
}

@Injectable()
export class MenuService implements OnModuleInit {
    private taskConfig: TaskConfig = new TaskConfig();

    constructor(private tg: TelegramService) {}

    async onModuleInit(): Promise<void> {
        await this.tg.sendText('–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞', false);
        await this.mainMenu();
    }

    async mainMenu(): Promise<void> {
        await this.tg.sendText('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Object.values(EMainMenu));
        this.setNext(this.mainMenuSelect);
    }

    async mainMenuSelect(selected: string): Promise<void> {
        switch (selected) {
            case EMainMenu.STATUS:
                await this.showStatus();
                break;

            case EMainMenu.TASK:
                await this.constructTask();
                break;

            default:
                await this.tg.sendText('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é');
        }
    }

    async showStatus(): Promise<void> {
        // TODO -
    }

    async constructTask(): Promise<void> {
        this.taskConfig = new TaskConfig();

        await this.taskStockPrompt();
    }

    async taskStockPrompt(): Promise<void> {
        await this.tg.sendText('–í—ã–±–µ—Ä–∏ –±–∏—Ä–∂—É', Object.values(EStock));
        this.setNext(this.taskStockSelect);
    }

    async taskStockSelect(selected: string): Promise<void> {
        if (!(selected in EStock)) {
            await this.tg.sendText('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∏—Ä–∂–∞');
            return;
        }

        this.taskConfig.stock = selected as EStock;

        await this.taskMarginPrompt();
    }

    async taskMarginPrompt(): Promise<void> {
        await this.tg.sendText('–í–≤–µ–¥–∏ –æ–±—â—É—é –º–∞—Ä–∂—É –¥–ª—è —Ç—Ä–∞—Ç', false);
        this.setNext(this.taskMarginSelect);
    }

    async taskMarginSelect(amountString: string): Promise<void> {
        const amount = parseInt(amountString);

        if (Number.isNaN(amount)) {
            await this.tg.sendText('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ');
            return;
        }

        this.taskConfig.marginAmount = amount;

        await this.taskStartPrompt();
    }

    async taskStartPrompt(): Promise<void> {
        await this.tg.sendText('–í–≤–µ–¥–∏ –Ω–∞—á–∞–ª–æ –ª–∏–Ω–∏–∏', false);
        this.setNext(this.taskStartSelect);
    }

    async taskStartSelect(startString: string): Promise<void> {
        const start = parseInt(startString);

        if (Number.isNaN(start)) {
            await this.tg.sendText('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ');
            return;
        }

        this.taskConfig.lineStart = start;

        await this.taskAfter10Prompt();
    }

    async taskAfter10Prompt(): Promise<void> {
        await this.tg.sendText('–í–≤–µ–¥–∏ –ª–∏–Ω–∏—é —á–µ—Ä–µ–∑ 10 —Å–≤–µ—á–µ–π', false);
        this.setNext(this.taskAfter10Select);
    }

    async taskAfter10Select(after10String: string): Promise<void> {
        this.taskConfig.lineStart = this.taskConfig.lineStart || 0;

        const after10 = parseInt(after10String);

        if (Number.isNaN(after10)) {
            await this.tg.sendText('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ');
            return;
        }

        this.taskConfig.lineAfter10 = after10;

        if (this.taskConfig.lineStart > this.taskConfig.lineAfter10) {
            this.taskConfig.side = TSide.LONG;
        } else {
            this.taskConfig.side = TSide.SHORT;
        }

        this.taskConfig.step = (this.taskConfig.lineAfter10 - this.taskConfig.lineStart) / 10;
        this.taskConfig.lineAfter20 = this.taskConfig.lineStart + this.taskConfig.step * 20;

        await this.taskSpikePrompt();
    }

    async taskSpikePrompt(): Promise<void> {
        await this.tg.sendText('–í–≤–µ–¥–∏ —Å–ø–∞–π–∫', false);
        this.setNext(this.taskSpikeSelect);
    }

    async taskSpikeSelect(spikeString: string): Promise<void> {
        const spike = parseInt(spikeString);

        if (Number.isNaN(spike)) {
            await this.tg.sendText('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ');
            return;
        }

        this.taskConfig.spike = spike;

        await this.taskCancelPrompt();
    }

    async taskCancelPrompt(): Promise<void> {
        await this.tg.sendText('–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –æ—Ç–º–µ–Ω–∏—Ç—å', false);
        this.setNext(this.taskCancelSelect);
    }

    async taskCancelSelect(cancelAfterString: string): Promise<void> {
        const cancelAfter = parseInt(cancelAfterString);

        if (Number.isNaN(cancelAfter)) {
            await this.tg.sendText('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ');
            return;
        }

        this.taskConfig.cancelAfter = cancelAfter;

        await this.taskConfirmPrompt();
    }

    async taskConfirmPrompt(): Promise<void> {
        await this.tg.sendText(
            `–í—Å—ë –≤–µ—Ä–Ω–æ?\n\n${JSON.stringify(this.taskConfig, null, 2)}`,
            Object.values(EConfirm),
        );
        this.setNext(this.taskConfirmSelect);
    }

    async taskConfirmSelect(choice: string): Promise<void> {
        if (choice === EConfirm.OK) {
            // TODO -
            await this.tg.sendText('–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É');
        } else {
            await this.tg.sendText('–û—Ç–º–µ–Ω–µ–Ω–æ');
        }

        await this.mainMenu();
    }

    async setNext(next: (text: string) => Promise<void>): Promise<void> {
        await this.tg.setNextStep(async (text) => {
            if (text === '/cancel') {
                await this.mainMenu();
            } else {
                await next.call(this, text);
            }
        });
    }
}
