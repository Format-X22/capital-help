import { Injectable, OnModuleInit } from '@nestjs/common';
import { TelegramService } from './telegram.service';
import { EStock, TaskService, ESide, Task } from './task.service';

enum EMainMenu {
    STATUS = 'üìÑ –°—Ç–∞—Ç—É—Å',
    ERRORS = 'üìï –û—à–∏–±–∫–∏',
    TASK = '‚ûï –ó–∞–¥–∞—á–∞',
    CLEAR = 'üßπ –û—á–∏—Å—Ç–∏—Ç—å',
    CANCEL = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
}

enum EConfirm {
    OK = '–î–∞',
    CANCEL = '–ù–µ—Ç',
}

@Injectable()
export class MenuService implements OnModuleInit {
    private taskConfig: Task = new Task();

    constructor(private tg: TelegramService, private taskService: TaskService) {}

    async onModuleInit(): Promise<void> {
        await this.tg.sendText('–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞', false);
        await this.mainMenu();
    }

    async mainMenu(): Promise<void> {
        await this.tg.sendText('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Object.values(EMainMenu));
        this.setNext(this.mainMenuSelect);
    }

    async mainMenuSelect(selected: string): Promise<void> {
        switch (selected) {
            case EMainMenu.STATUS:
                await this.showStatus();
                break;

            case EMainMenu.ERRORS:
                await this.showErrors();
                break;

            case EMainMenu.TASK:
                await this.constructTask();
                break;

            case EMainMenu.CLEAR:
                await this.clearTaskPrompt();
                break;

            case EMainMenu.CANCEL:
                await this.cancelTaskPrompt();
                break;

            default:
                await this.tg.sendText('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é');
        }
    }

    private async showStatus(): Promise<void> {
        await this.tg.sendText(this.toPrettyJson(this.taskService.getTasks()));
    }

    private async showErrors(): Promise<void> {
        await this.tg.sendText(this.toPrettyJson(this.taskService.getLast10Errors()));
    }

    private async clearTaskPrompt(): Promise<void> {
        await this.tg.sendText('–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å?');
        this.setNext(this.clearTaskDo);
    }

    private async clearTaskDo(idString: string): Promise<void> {
        if (Number.isNaN(idString)) {
            await this.tg.sendText('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ');
            return;
        }

        await this.tg.sendText(await this.taskService.clear(Number(idString)));
        await this.mainMenu();
    }

    private async cancelTaskPrompt(): Promise<void> {
        await this.tg.sendText('–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å?');
        this.setNext(this.cancelTaskDo);
    }

    private async cancelTaskDo(idString: string): Promise<void> {
        if (Number.isNaN(idString)) {
            await this.tg.sendText('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ');
            return;
        }

        await this.tg.sendText(await this.taskService.cancel(Number(idString)));
        await this.mainMenu();
    }

    private async constructTask(): Promise<void> {
        this.taskConfig = new Task();

        await this.taskStockPrompt();
    }

    private async taskStockPrompt(): Promise<void> {
        await this.tg.sendText('–í—ã–±–µ—Ä–∏ –±–∏—Ä–∂—É', Object.values(EStock));
        this.setNext(this.taskStockSelect);
    }

    private async taskStockSelect(selected: string): Promise<void> {
        if (!(selected in EStock)) {
            await this.tg.sendText('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∏—Ä–∂–∞');
            return;
        }

        this.taskConfig.stock = selected as EStock;

        await this.taskMarginPrompt();
    }

    private async taskMarginPrompt(): Promise<void> {
        await this.tg.sendText('–í–≤–µ–¥–∏ –æ–±—â—É—é –º–∞—Ä–∂—É –¥–ª—è —Ç—Ä–∞—Ç', false);
        this.setNext(this.taskMarginSelect);
    }

    private async taskMarginSelect(amountString: string): Promise<void> {
        const amount = parseInt(amountString);

        if (Number.isNaN(amount)) {
            await this.tg.sendText('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ');
            return;
        }

        this.taskConfig.marginAmount = amount;

        // TODO -
        await this.taskConfirmPrompt();
    }

    private async taskConfirmPrompt(): Promise<void> {
        await this.tg.sendText(
            `–í—Å—ë –≤–µ—Ä–Ω–æ?\n\n${this.toPrettyJson(this.taskConfig)}`,
            Object.values(EConfirm),
        );
        this.setNext(this.taskConfirmSelect);
    }

    private async taskConfirmSelect(choice: string): Promise<void> {
        if (choice === EConfirm.OK) {
            this.taskService.add(this.taskConfig);
            await this.tg.sendText('–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É');
        } else {
            await this.tg.sendText('–û—Ç–º–µ–Ω–µ–Ω–æ');
        }

        await this.mainMenu();
    }

    private setNext(next: (text: string) => Promise<void>): void {
        this.tg.setNextStep(async (text) => {
            if (text === '/cancel') {
                await this.mainMenu();
            } else {
                await next.call(this, text);
            }
        });
    }

    private toPrettyJson(data: unknown) {
        return JSON.stringify(data, null, 2);
    }
}
